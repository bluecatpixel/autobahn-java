apply plugin: 'com.android.library'

def groupID = 'io.crossbar.autobahn'
def gitUrl = 'https://github.com/crossbario/autobahn-java.git'
def licenseName = 'MIT'
def licenseUrl = 'https://opensource.org/licenses/MIT'
def relVersion = '20.7.2'
def siteUrl = 'https://github.com/crossbario/autobahn-java'
def ARTIFACT_ANDROID = 'autobahn-android'


dependencies {
    api 'com.fasterxml.jackson.core:jackson-core:2.11.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.1'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.20'
    implementation 'com.github.joshjdevl.libsodiumjni:libsodium-jni-aar:2.0.2'
    implementation 'org.web3j:core:4.6.0-android'
    implementation 'org.web3j:abi:4.6.0-android'
    implementation 'org.web3j:utils:4.6.0-android'
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    sourceSets {
        main {
            java {
                exclude 'io/crossbar/autobahn/wamp/transports/Netty*'
                exclude 'io/crossbar/autobahn/utils/ABJLogger.java'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/spring.tooling'
        exclude 'META-INF/spring.handlers'
        exclude 'META-INF/spring.schemas'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}
project.archivesBaseName = ARTIFACT_ANDROID
group = groupID
version = relVersion

if (PUBLISH) {
    apply plugin: 'com.github.dcendents.android-maven'

    install {
        repositories.mavenInstaller {
            // This generates POM.xml with proper parameters
            pom {
                project {
                    packaging 'aar'
                    groupId groupID
                    artifactId ARTIFACT_ANDROID

                    // Add your description here
                    name ARTIFACT_ANDROID
                    description 'WebSocket & WAMP for Android'
                    url siteUrl

                    // Set your license
                    licenses {
                        license {
                            name licenseName
                            url licenseUrl
                        }
                    }
                    developers {
                        developer {
                            id "crossbario"
                            name "Crossbar.io"
                            email "support@crossbario.com"
                        }
                    }
                    scm {
                        url siteUrl
                    }
                }
            }
        }
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
